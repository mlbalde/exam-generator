/* Generated By:JavaCC: Do not edit this line. LatexLexerTokenManager.java */
package latexparser.javacc;
import data.*;
import java.util.ArrayList;

/** Token Manager. */
public class LatexLexerTokenManager implements LatexLexerConstants
{
    //Definitions used when lexing the \verb ...  latex structure.
    int InVerb=0;
    String InVerbChar="";

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 15);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 2;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffeffeffffd9ffL & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  else if ((0x100100000200L & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  break;
               case 1:
                  if ((0xffffeffeffffd9ffL & l) != 0L)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 20)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 2 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xe0600800L) != 0L)
            return 5;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 37:
         jjmatchedKind = 12;
         return jjMoveStringLiteralDfa1_0(0x7fcL);
      case 92:
         return jjMoveStringLiteralDfa1_0(0xe0600800L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 64:
         return jjMoveStringLiteralDfa2_0(active0, 0x7fcL);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x20600000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x30L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0xcL);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 81:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 84:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(2, 10);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x20600800L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000cL);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x20600000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x30L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0xc0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0xcL);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x1c0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x20600000L);
      case 109:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(4, 31);
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x30L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 123:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0xcL);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x20600000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0xc0L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x30L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x3cL);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 115:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(6, 8);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0xc0L);
      case 123:
         return jjMoveStringLiteralDfa7_0(active0, 0x20600000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0xc0L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      case 110:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(7, 11);
         break;
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x3cL);
      case 115:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(7, 9);
         break;
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa9_0(active0, 0x3cL);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0xc0L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0x14L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000028L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0xc0L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa11_0(active0, 0xc0L);
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x14L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x28L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x40400000L);
      case 100:
         if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(11, 3);
         else if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(11, 5);
         break;
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000L);
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0x14L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000L);
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0xc0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x14L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0xc0L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x40400000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000L);
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0xc0L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x40000000L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000L);
      case 110:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(13, 2);
         else if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(13, 4);
         break;
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000L);
      case 107:
         return jjMoveStringLiteralDfa15_0(active0, 0xc0L);
      case 109:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000000L);
      case 125:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(14, 30);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa16_0(active0, 0xc0L);
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000L);
      case 125:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(15, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa17_0(active0, 0x40L);
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x80L);
      case 103:
         return jjMoveStringLiteralDfa17_0(active0, 0x200000L);
      case 125:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(16, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa18_0(active0, 0x80L);
      case 125:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(17, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(18, 7);
         break;
      case 103:
         return jjMoveStringLiteralDfa19_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(20, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 15;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  kind = 26;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 0:
                  if (curChar == 92)
                     jjAddStates(0, 1);
                  break;
               case 1:
                  if (curChar == 98)
                     jjCheckNAdd(2);
                  break;
               case 2:
                  if (kind > 26)
                     kind = 26;
                  break;
               case 3:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 101)
                     jjCheckNAdd(2);
                  break;
               case 7:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 26)
                     kind = 26;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 15 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 41:
         return jjStopAtPos(0, 18);
      case 61:
         return jjStopAtPos(0, 17);
      default :
         return jjMoveNfa_3(1, 0);
   }
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xffffeffeffffd9ffL & l) != 0L)
                  {
                     if (kind > 20)
                        kind = 20;
                  }
                  else if ((0x100100000200L & l) != 0L)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  if ((0x3ff200000000000L & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAdd(0);
                  }
                  break;
               case 0:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0xffffeffeffffd9ffL & l) != 0L && kind > 20)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (kind > 20)
                     kind = 20;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 16)
                        kind = 16;
                     jjCheckNAdd(0);
                  }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 16)
                     kind = 16;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (kind > 20)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 20)
                     kind = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 13)
                        kind = 13;
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 14)
                        kind = 14;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if ((0x2400L & l) != 0L && kind > 14)
                     kind = 14;
                  break;
               case 2:
                  if (curChar == 10 && kind > 14)
                     kind = 14;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 13)
                     kind = 13;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_5()
{
   return jjMoveNfa_5(0, 0);
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 4;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xffffffffffffdbffL & l) != 0L)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if ((0x2400L & l) != 0L && kind > 28)
                     kind = 28;
                  break;
               case 2:
                  if (curChar == 10 && kind > 28)
                     kind = 28;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 27;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 27)
                     kind = 27;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 4 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 92:
         return jjMoveStringLiteralDfa1_4(0x3000000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa2_4(active0, 0x3000000L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa3_4(active0, 0x3000000L);
      default :
         return 3;
   }
}
private int jjMoveStringLiteralDfa3_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa4_4(active0, 0x3000000L);
      default :
         return 4;
   }
}
private int jjMoveStringLiteralDfa4_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 123:
         return jjMoveStringLiteralDfa5_4(active0, 0x3000000L);
      default :
         return 5;
   }
}
private int jjMoveStringLiteralDfa5_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa6_4(active0, 0x1000000L);
      case 118:
         return jjMoveStringLiteralDfa6_4(active0, 0x2000000L);
      default :
         return 6;
   }
}
private int jjMoveStringLiteralDfa6_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa7_4(active0, 0x2000000L);
      case 115:
         return jjMoveStringLiteralDfa7_4(active0, 0x1000000L);
      default :
         return 7;
   }
}
private int jjMoveStringLiteralDfa7_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa8_4(active0, 0x2000000L);
      case 116:
         return jjMoveStringLiteralDfa8_4(active0, 0x1000000L);
      default :
         return 8;
   }
}
private int jjMoveStringLiteralDfa8_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 8;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 8;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa9_4(active0, 0x2000000L);
      case 108:
         return jjMoveStringLiteralDfa9_4(active0, 0x1000000L);
      default :
         return 9;
   }
}
private int jjMoveStringLiteralDfa9_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 9;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_4(active0, 0x2000000L);
      case 105:
         return jjMoveStringLiteralDfa10_4(active0, 0x1000000L);
      default :
         return 10;
   }
}
private int jjMoveStringLiteralDfa10_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 10;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 10;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa11_4(active0, 0x1000000L);
      case 116:
         return jjMoveStringLiteralDfa11_4(active0, 0x2000000L);
      default :
         return 11;
   }
}
private int jjMoveStringLiteralDfa11_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 11;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 11;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa12_4(active0, 0x2000000L);
      case 116:
         return jjMoveStringLiteralDfa12_4(active0, 0x1000000L);
      default :
         return 12;
   }
}
private int jjMoveStringLiteralDfa12_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 12;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 12;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa13_4(active0, 0x1000000L);
      case 109:
         return jjMoveStringLiteralDfa13_4(active0, 0x2000000L);
      default :
         return 13;
   }
}
private int jjMoveStringLiteralDfa13_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 13;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 13;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa14_4(active0, 0x1000000L);
      case 125:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(13, 25);
         break;
      default :
         return 14;
   }
   return 14;
}
private int jjMoveStringLiteralDfa14_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 14;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 14;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa15_4(active0, 0x1000000L);
      default :
         return 15;
   }
}
private int jjMoveStringLiteralDfa15_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 15;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 15;
   }
   switch(curChar)
   {
      case 125:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(15, 24);
         break;
      default :
         return 16;
   }
   return 16;
}
static final int[] jjnextStates = {
   5, 14, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, "\45\100\110\145\141\144\145\162\56\142\145\147\151\156", 
"\45\100\110\145\141\144\145\162\56\145\156\144", "\45\100\106\157\157\164\145\162\56\142\145\147\151\156", 
"\45\100\106\157\157\164\145\162\56\145\156\144", 
"\45\100\121\165\145\163\164\151\157\156\102\154\157\143\153\56\142\145\147\151\156", "\45\100\121\165\145\163\164\151\157\156\102\154\157\143\153\56\145\156\144", 
"\45\100\123\160\145\143\163", "\45\100\120\141\162\141\155\163", "\45\100\124", 
"\134\163\145\143\164\151\157\156", "\45", null, null, "\50", null, "\75", "\51", null, null, 
"\134\142\145\147\151\156\173\154\163\164\154\151\163\164\151\156\147\175", "\134\142\145\147\151\156\173\166\145\162\142\141\164\151\155\175", null, null, 
null, null, null, null, 
"\134\142\145\147\151\156\173\145\156\165\155\145\162\141\164\145\175", "\134\145\156\144\173\145\156\165\155\145\162\141\164\145\175", 
"\134\151\164\145\155", null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_COMMENT",
   "IN_SP_PARAM",
   "IN_PARAM_INSIDE",
   "IN_VERBAT",
   "IN_VERBTOK",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, 1, 1, 1, 1, 2, 1, 2, 2, 1, -1, 1, -1, 0, 3, -1, -1, 1, -1, 1, 4, 4, -1, 0, 
   0, 5, -1, 0, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x1ff67fffdL, 
};
static final long[] jjtoSkip = {
   0x80000L, 
};
static final long[] jjtoMore = {
   0x900000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[15];
private final int[] jjstateSet = new int[30];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public LatexLexerTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public LatexLexerTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 15; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 32)
         {
            jjmatchedKind = 32;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 23)
         {
            jjmatchedKind = 23;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 26 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
           InVerb=1;InVerbChar=image.substring(image.length()-1,image.length());
         break;
      case 27 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                        //the \verb ends at EOL. The Latex will raise an error if
                                        //an EOL is reached before reaching the closing character.
                                        //So it's a safety net.
                String ss=image.toString(); //Get the token
                if(ss.equals(InVerbChar) && InVerb==1)  //Is the character identical 
                                                        //with the one that begins the sequence?
                    {
                       InVerb=0;        //Exit the context.
                       SwitchTo(DEFAULT);
                    };
         break;
      case 28 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                //Safety net. If an EOL is reached, the lexer can
                                //safely leave VERBTOK context. Latex will raise an error.
                InVerb=0;
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
