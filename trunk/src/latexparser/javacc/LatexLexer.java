/* Generated By:JavaCC: Do not edit this line. LatexLexer.java */
package latexparser.javacc;
import data.*;
import java.util.ArrayList;
public class LatexLexer implements LatexLexerConstants {
    private ParsedSource source;
    /**
    * Initializes the fields
    */
    private void init(){
        source=new ParsedSource();
    }

    /**
    * Main entry point in the lexer/parser. Call the constructor with the stream
    * and then call getParsedSource to parse the file and get the object.
    */
    public ParsedSource getParsedSource()throws ParseException{
        init();

        ParserEntry();

        return source;
    }

/* Main entry point of parser
    I can have a comment, or regular content, or some commands.
*/
  final public void ParserEntry() throws ParseException {
    StringBuilder acc=new StringBuilder();
    String s;
    Section sect;
    if (jj_2_2(10)) {
      label_1:
      while (true) {
        s = RegularContent();
                         acc.append(s);
        if (jj_2_1(10)) {
          ;
        } else {
          break label_1;
        }
      }
    } else {
      ;
    }
    if (jj_2_3(10)) {
      jj_consume_token(SPECS);
      ParseSpecs();
    } else {
      ;
    }
    if (jj_2_5(10)) {
      label_2:
      while (true) {
        s = RegularContent();
                         acc.append(s);
        if (jj_2_4(10)) {
          ;
        } else {
          break label_2;
        }
      }
    } else {
      ;
    }
    jj_consume_token(HEAD_BEGIN);
    ParseHeader();
                               acc=new StringBuilder();
    if (jj_2_7(10)) {
      label_3:
      while (true) {
        s = RegularContent();
                         acc.append(s);
        if (jj_2_6(10)) {
          ;
        } else {
          break label_3;
        }
      }
    } else {
      ;
    }
    if (jj_2_8(10)) {
      jj_consume_token(SPECS);
      ParseSpecs();
    } else {
      ;
    }
    if (jj_2_10(10)) {
      label_4:
      while (true) {
        s = RegularContent();
                         acc.append(s);
        if (jj_2_9(10)) {
          ;
        } else {
          break label_4;
        }
      }
    } else {
      ;
    }
    if (jj_2_12(10)) {
      label_5:
      while (true) {
        jj_consume_token(SECTION);
                    sect=ParseSection(); source.getSubitems().add(sect);
        if (jj_2_11(10)) {
          ;
        } else {
          break label_5;
        }
      }
    } else if (jj_2_13(10)) {
      jj_consume_token(ENUM_BEGIN);
             //See if a header was set
                if(source.getHeader().length()<=0)
                     source.setHeader(acc.toString());
                acc=new StringBuilder();
      ParseMainBodyWithoutSection();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_15(10)) {
      label_6:
      while (true) {
        s = RegularContent();
                         acc.append(s);
        if (jj_2_14(10)) {
          ;
        } else {
          break label_6;
        }
      }
    } else {
      ;
    }
    if (jj_2_16(10)) {
      jj_consume_token(SPECS);
      ParseSpecs();
    } else {
      ;
    }
    if (jj_2_18(10)) {
      label_7:
      while (true) {
        s = RegularContent();
                         acc.append(s);
        if (jj_2_17(10)) {
          ;
        } else {
          break label_7;
        }
      }
    } else {
      ;
    }
    jj_consume_token(FOOT_BEGIN);
    ParseFooter();
  }

  final public void ParseHeader() throws ParseException {
    StringBuilder acc=new StringBuilder();
    String s;
    Token t;
     acc.append("%");
    label_8:
    while (true) {
      if (jj_2_19(10)) {
        ;
      } else {
        break label_8;
      }
      if (jj_2_23(10)) {
        s = RegularContent();
                           acc.append(s);
      } else if (jj_2_24(10)) {
        if (jj_2_20(10)) {
          t = jj_consume_token(ENUM_BEGIN);
        } else if (jj_2_21(10)) {
          t = jj_consume_token(ENUM_END);
        } else if (jj_2_22(10)) {
          t = jj_consume_token(ITEM);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
         acc.append(t.image);
      } else if (jj_2_25(10)) {
        jj_consume_token(SPECS);
        ParseSpecs();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(HEAD_END);
               source.setHeader(acc.toString());
  }

/*
Parse main body formed by a big enumeration containing questions and question blocks
*/
  final public void ParseMainBodyWithoutSection() throws ParseException {
    StringBuilder acc=new StringBuilder();
    String s;
    Token t;
    Question q=null;
    QuestionBlock qb=null;
    ParseBigEnumeration(source);
  }

/**
    Parses a \begin{enumerate} ...  \end{enumerate} where between these 
    can be questions and/or question blocks
    Returns the characters found between after the end of the {enumerate} and the beginning of the next bloc/item
*/
  final public String ParseBigEnumeration(SourceItem container) throws ParseException {
    QuestionBlock qb;
    Question q;
    String s;
    StringBuilder opt=new StringBuilder();
    boolean collectContent=true;
    label_9:
    while (true) {
      if (jj_2_27(10)) {
        jj_consume_token(BLOCK_BEGIN);
        //Parse a question block.
                qb = ParseQuestionBlock();
         container.getSubitems().add(qb);
         collectContent=false;
      } else if (jj_2_28(10)) {
        jj_consume_token(ITEM);
        //Parse a question. 
                q = ParseQuestion();
         container.getSubitems().add(q);
         collectContent=false;
      } else if (jj_2_29(10)) {
        label_10:
        while (true) {
          s = RegularContent();
                if(collectContent)
                    opt.append(s);
          if (jj_2_26(10)) {
            ;
          } else {
            break label_10;
          }
        }
      } else if (jj_2_30(10)) {
        jj_consume_token(SPECS);
        ParseSpecs();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_31(10)) {
        ;
      } else {
        break label_9;
      }
    }
    jj_consume_token(ENUM_END);
 {if (true) return opt.toString();}
    throw new Error("Missing return statement in function");
  }

/**
    Parse an individual section
*/
  final public Section ParseSection() throws ParseException {
    StringBuilder content=new StringBuilder("");
    ArrayList<SourceItem> items=new ArrayList<SourceItem>();
    String s;
    Section  section=new Section();
    Directive dir=new Directive();
     content.append("\u005c\u005csection");
    label_11:
    while (true) {
      s = RegularContent();
                        content.append(s);
      if (jj_2_32(10)) {
        ;
      } else {
        break label_11;
      }
    }
    if (jj_2_33(10)) {
      jj_consume_token(PARAMS);
      dir = ParseParameterSet();
    } else {
      ;
    }
    if (jj_2_35(10)) {
      label_12:
      while (true) {
        s = RegularContent();
                         content.append(s);
        if (jj_2_34(10)) {
          ;
        } else {
          break label_12;
        }
      }
    } else {
      ;
    }
    if (jj_2_36(10)) {
      jj_consume_token(ENUM_BEGIN);
      s = ParseBigEnumeration(section);
                                       section.setEnumerateOptions(s);
    } else {
      ;
    }
    if (jj_2_38(10)) {
      label_13:
      while (true) {
        RegularContent();
        if (jj_2_37(10)) {
          ;
        } else {
          break label_13;
        }
      }
    } else {
      ;
    }
     section.setTextContent(content.toString()); section.getParameters().getMap().putAll(dir.getMap()); {if (true) return section;}
    throw new Error("Missing return statement in function");
  }

/*
    Parse the footer
*/
  final public void ParseFooter() throws ParseException {
    StringBuilder acc=new StringBuilder();
    String s;
    Token t;
     acc.append("%");
    label_14:
    while (true) {
      if (jj_2_39(10)) {
        ;
      } else {
        break label_14;
      }
      if (jj_2_43(10)) {
        s = RegularContent();
                           acc.append(s);
      } else if (jj_2_44(10)) {
        if (jj_2_40(10)) {
          t = jj_consume_token(ENUM_BEGIN);
        } else if (jj_2_41(10)) {
          t = jj_consume_token(ENUM_END);
        } else if (jj_2_42(10)) {
          t = jj_consume_token(ITEM);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
         acc.append(t.image);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(FOOT_END);
               source.setFooter(acc.toString());
  }

/*
Parse a question block
*/
  final public QuestionBlock ParseQuestionBlock() throws ParseException {
    StringBuilder content=new StringBuilder("");
    ArrayList<Question> questions=new ArrayList<Question>();
    String s;
    Question q;
    Directive dir;
    //Parse the parameters
        dir = ParseParameterSet();
     content.append("%");
    label_15:
    while (true) {
      s = RegularContent();
                        content.append(s);
      if (jj_2_45(10)) {
        ;
      } else {
        break label_15;
      }
    }
    label_16:
    while (true) {
      if (jj_2_46(10)) {
        jj_consume_token(ITEM);
        q = ParseQuestion();
                          questions.add(q);
      } else if (jj_2_47(10)) {
        RegularContent();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_48(10)) {
        ;
      } else {
        break label_16;
      }
    }
    jj_consume_token(BLOCK_END);
    label_17:
    while (true) {
      s = RegularContent();
                        content.append(s);
      if (jj_2_49(10)) {
        ;
      } else {
        break label_17;
      }
    }
        {if (true) return new QuestionBlock(content.toString(),questions,dir);}
    throw new Error("Missing return statement in function");
  }

/*
Parse a parameter set.
*/
  final public Directive ParseParameterSet() throws ParseException {
    Directive d=new Directive();
    Token t1,t2;
    jj_consume_token(LPAR);
    label_18:
    while (true) {
      if (jj_2_50(10)) {
        ;
      } else {
        break label_18;
      }
      t1 = jj_consume_token(LITERAL);
      jj_consume_token(EQUALS);
      t2 = jj_consume_token(LITERAL);
         d.getMap().put(t1.image,t2.image);
    }
    jj_consume_token(RPAR);
     {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

/*
Parse a parameter specification
*/
  final public void ParseSpecs() throws ParseException {
    Directive d;
    d = ParseParameterSet();
     source.getParameters().getMap().putAll(d.getMap());
  }

/*Parse a question
*/
  final public Question ParseQuestion() throws ParseException {
    StringBuilder content=new StringBuilder("");
    ArrayList<Answer> answers=new ArrayList<Answer>();
    String s;
    Answer ans;
    label_19:
    while (true) {
      s = RegularContent();
                        content.append(s);
      if (jj_2_51(10)) {
        ;
      } else {
        break label_19;
      }
    }
    jj_consume_token(ENUM_BEGIN);
    label_20:
    while (true) {
      if (jj_2_52(10)) {
        jj_consume_token(ITEM);
        ans = ParseAnswer();
             answers.add(ans);
      } else if (jj_2_53(10)) {
        RegularContent();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_54(10)) {
        ;
      } else {
        break label_20;
      }
    }
    jj_consume_token(ENUM_END);
        {if (true) return new Question(content.toString(),answers,null);}
    throw new Error("Missing return statement in function");
  }

/*Parse an answer
*/
  final public Answer ParseAnswer() throws ParseException {
    StringBuilder content=new StringBuilder("");
    String s;
    boolean tval=false;
    Token t;
    label_21:
    while (true) {
      s = RegularContent();
                        content.append(s);
      if (jj_2_55(10)) {
        ;
      } else {
        break label_21;
      }
    }
    if (jj_2_58(10)) {
      jj_consume_token(TRUE_ITEM);
                  tval=true;content.append("%");
      label_22:
      while (true) {
        if (jj_2_56(10)) {
          ;
        } else {
          break label_22;
        }
        t = jj_consume_token(CHARS_IN_COMMENT);
                          content.append(t.image);
      }
      t = jj_consume_token(END_COMMENT);
                     content.append(t.image);
      label_23:
      while (true) {
        if (jj_2_57(10)) {
          ;
        } else {
          break label_23;
        }
        s = RegularContent();
                         content.append(s);
      }
    } else {
      ;
    }
        {if (true) return new Answer(content.toString(),tval,null);}
    throw new Error("Missing return statement in function");
  }

/* Get regular content, constructed from code characters, comments, verbatims,
\verb consructs, etc.
*/
  final public String RegularContent() throws ParseException {
    StringBuilder content=new StringBuilder("");
    Token t;
    if (jj_2_69(10)) {
      t = jj_consume_token(CHARS_IN_DEFAULT);
                             content.append(t.image);
    } else if (jj_2_70(10)) {
      if (jj_2_60(10)) {
        t = jj_consume_token(VERBTOK);
                     content.append(t.image);
        label_24:
        while (true) {
          if (jj_2_59(10)) {
            ;
          } else {
            break label_24;
          }
          t = jj_consume_token(CHARS_IN_VERBTOK);
                            content.append(t.image);
        }
      } else if (jj_2_61(10)) {
        t = jj_consume_token(EOL_IN_VERBTOK);
                           content.append(t.image);
      } else if (jj_2_62(10)) {
        jj_consume_token(0);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else if (jj_2_71(10)) {
      t = jj_consume_token(COMMENT_S);
                   content.append(t.image);
      label_25:
      while (true) {
        if (jj_2_63(10)) {
          ;
        } else {
          break label_25;
        }
        t = jj_consume_token(CHARS_IN_COMMENT);
                           content.append(t.image);
      }
      t = jj_consume_token(END_COMMENT);
                       content.append(t.image);
    } else if (jj_2_72(10)) {
      label_26:
      while (true) {
        if (jj_2_64(10)) {
          ;
        } else {
          break label_26;
        }
        t = jj_consume_token(CHARS_IN_COMMENT);
                           content.append(t.image);
      }
      t = jj_consume_token(END_COMMENT);
                     content.append(t.image);
    } else if (jj_2_73(10)) {
      if (jj_2_65(10)) {
        t = jj_consume_token(B_LST);
      } else if (jj_2_66(10)) {
        t = jj_consume_token(B_VRB);
      } else if (jj_2_67(10)) {
        t = jj_consume_token(E_LST);
      } else if (jj_2_68(10)) {
        t = jj_consume_token(E_VRB);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      content.append(t.image);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return content.toString();}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_3_49() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(ITEM)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) return true;
    }
    return false;
  }

  private boolean jj_3_45() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(ENUM_END)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_32()) return true;
    Token xsp;
    if (jj_3_45()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_45()) { jj_scanpos = xsp; break; }
    }
    if (jj_3_48()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_48()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(BLOCK_END)) return true;
    if (jj_3_49()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(ENUM_BEGIN)) return true;
    return false;
  }

  private boolean jj_3_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3_44()) return true;
    }
    return false;
  }

  private boolean jj_3_43() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_scan_token(0)) return true;
    return false;
  }

  private boolean jj_3_68() {
    if (jj_scan_token(E_VRB)) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_67() {
    if (jj_scan_token(E_LST)) return true;
    return false;
  }

  private boolean jj_3_38() {
    Token xsp;
    if (jj_3_37()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_scan_token(ENUM_BEGIN)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_35() {
    Token xsp;
    if (jj_3_34()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_34()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(PARAMS)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_scan_token(B_VRB)) return true;
    return false;
  }

  private boolean jj_3_65() {
    if (jj_scan_token(B_LST)) return true;
    return false;
  }

  private boolean jj_3_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3_66()) {
    jj_scanpos = xsp;
    if (jj_3_67()) {
    jj_scanpos = xsp;
    if (jj_3_68()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_64() {
    if (jj_scan_token(CHARS_IN_COMMENT)) return true;
    return false;
  }

  private boolean jj_3_72() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_64()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END_COMMENT)) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_scan_token(CHARS_IN_COMMENT)) return true;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_scan_token(EOL_IN_VERBTOK)) return true;
    return false;
  }

  private boolean jj_3_71() {
    if (jj_scan_token(COMMENT_S)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_63()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END_COMMENT)) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(SPECS)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_scan_token(CHARS_IN_VERBTOK)) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_scan_token(VERBTOK)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_59()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_29() {
    Token xsp;
    if (jj_3_26()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(ITEM)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_69() {
    if (jj_scan_token(CHARS_IN_DEFAULT)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(ITEM)) return true;
    return false;
  }

  private boolean jj_3_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(BLOCK_BEGIN)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3_70()) {
    jj_scanpos = xsp;
    if (jj_3_71()) {
    jj_scanpos = xsp;
    if (jj_3_72()) {
    jj_scanpos = xsp;
    if (jj_3_73()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    if (jj_3_31()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_31()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ENUM_END)) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(ENUM_END)) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_scan_token(CHARS_IN_COMMENT)) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_scan_token(TRUE_ITEM)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_56()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END_COMMENT)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_57()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_55() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    Token xsp;
    if (jj_3_55()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_55()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_58()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(SPECS)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(ENUM_BEGIN)) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_52() {
    if (jj_scan_token(ITEM)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) return true;
    }
    return false;
  }

  private boolean jj_3_51() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    if (jj_3_51()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_51()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ENUM_BEGIN)) return true;
    if (jj_3_54()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_54()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(ENUM_END)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_18() {
    Token xsp;
    if (jj_3_17()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_15() {
    Token xsp;
    if (jj_3_14()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(SPECS)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(ENUM_BEGIN)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(SECTION)) return true;
    return false;
  }

  private boolean jj_3_12() {
    Token xsp;
    if (jj_3_11()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_10() {
    Token xsp;
    if (jj_3_9()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(SPECS)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_7() {
    Token xsp;
    if (jj_3_6()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_5() {
    Token xsp;
    if (jj_3_4()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(SPECS)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_2() {
    Token xsp;
    if (jj_3_1()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_50() {
    if (jj_scan_token(LITERAL)) return true;
    if (jj_scan_token(EQUALS)) return true;
    if (jj_scan_token(LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(LPAR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_50()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAR)) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(ITEM)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public LatexLexerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[73];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public LatexLexer(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LatexLexer(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LatexLexerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public LatexLexer(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LatexLexerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public LatexLexer(LatexLexerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LatexLexerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[33];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 33; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 73; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
